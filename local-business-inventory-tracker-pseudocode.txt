Local Business Inventory Tracker
pick one inventory item and track how much of it is remaining as it gets sold or given away.
plan out your application and draw a component tree or component diagram that shows the structure of your components. 
include in your README. 
add CREATE, READ, and UPDATE functionality

// As a user, I want to see a list of all available types of items.

// For each item, I want to see its name, description, price, quantity (out of 130)

// As a user, I want to be able to click on an item to see its detail page.

// As a user, I want to submit a form to add a new item to the inventory.

// As a user, I want to see how many are left out of 130 i.e. pounds of coffee beans are left in a burlap sack. A burlap sack has roughly 130 pounds.

// As a user, I want to be able to click a button to sell an item, decrementing count by 1, i.e. A pound of coffee beans. This should decrease the number of pounds left by 1. The number of pounds in a sack of coffee beans should not be able to go below 0.


// Create component diagram
>  create component diagram


// create repo and set up directory


// create Header.js

	add basic code
	
	add to App.js

	confirm visual of Rich Fitness header


// create EquipmentDisplay.js
	create JSX for props.imgUrl to display image /w onCLick event when img is clicked
	<img src={props.imgUrl} alt="An image of tickets" />
		props.name
			add EquipmentDisplay.propTypes for name and imgUrl (string)
	
	add <EquipmentDisplay {propsHere}/> to return of EquipmentList.js function component 
	
	
// create EquipmentList.js
	return JSX of equipment in props.equipmentList array using map
		for every element, create <EquipmentDisplay {propsHere}/>
			add EquipmentList.propTypes for equipmentList array and whenEquipmentClicked func
			
	comment out whenEquipmentClicked prop and propType 


// create EquipmentControl.js
	add state slice mainEquipmentList: [ {name: "name", description: "description", price: 
	"price", quantity: 130 imgUrl: "https://www.pngkey.com/png/detail/243-2434212_shipping-box-png-banner-transparent-download-shipping-boxes.png"} ]
	
	add to render let currentlyVisibleState = null;
    let buttonText = null;
	
	assign currentlyVisibleState to <EquipmentList equipmentList={this.state.mainEqupmentList}/>
	
	return {currentlyVisibleState} and button
	
	add to App.js
	
	confirm equipment is displayed
	


	add handleClick function
	
	add state slice formVisibleOnPage: false
	

// create NewEquipmentForm.js

// create ReusableForm.js
	
	confirm adding new equipment > form fill and submit adds new equipment
	
	
// create EquipmentDetails.js view
	add state slice selectedEquipment: null
	
	Create a method in EquipmentControl that will handle when a equipment is clicked.
	
	Create a new conditional in EquipmentControl to handle the EquipmentDetail component.
	
	prop drill our method onEquipmentSelection for handling a equipment click down from Control to EquipmentList then to Equipment
	
	add whenEquipmentClicked prop and propType in EquipmentList.js
	
	add to EquipmentDisplay our onClick={() => props.whenEquipmentClicked(props.id)}
		
	update EquipmentDetail to handle props
	
	update handClick() in Control to toggle state change when clicking Return to List
	
	confirm details page


// add delete
	add handleDeletingEquipment function to EquipmentControl
	
	pass function as prop down to <EquipmentDetail ... onClickingDelete={this.handleDeletingEquipment}/> 
	
	add onClickingDelete to prop destructuring
		add button to EquipmentDetails with an onClick={() => onClickingDelete(equipment.id)}

// add update
	add slice of state to EquipmentControl editing: false
	
	add handleEditClick function literal
	
	pass handleEditClick as prop to EquipmentDetails
		onClickingEdit={this.handleEditClick}
		
	add button to EquipmentDetails.js /w onClick={ props.onClickingEdit } to simply change state to set editing to true
		add propType for onClickingEdit: PropTypes.func
		
	add conditional rendering for EditEquipmentForm
		pass this.state.selectedEquipment as a prop to <EditTicketForm />
		
	create EditEquipmentForm.js
		reuse ReusableForm to create form
		
	add a method in EquipmentControl to handle updating equipment
	handleEditEquipmentInList
	
	pass handleEditEquipmentInList as a prop to EditEquipmentForm
	
	in EditEquipmentForm add method handleEditTicketFormSubmission(event) that will call callback function
	props.onEditEquipment
	


// add "sold" decrement
	

	
	
	

	


// Create README.md
	- attach component diagram